{:title "Destructuring"
 :template "docpage.html"
 :order 11}
---

Janet uses the @code[get] function to retrieve values from inside data
structures. In many cases, however, you do not need the @code[get] function at
all. Janet supports destructuring, which means both the @code[def] and
@code[var] special forms can extract values from inside structures themselves.

@codeblock[janet](```
# Without destructuring, we might do
(def my-array @[:mary :had :a :little :lamb])
(def lamb (get my-array 4))
(print lamb) # Prints :lamb

# Now, with destructuring,
(def [_ _ _ _ lamb] my-array)
(print lamb) # Again, prints :lamb

# You can also collect trailing destructured values into a "more"
# tuple, though note that it copies, and so may be costly.
(def [p q & more] my-array)
(print p) # :mary
(print q) # :had
(pp more) # (:a :little :lamb)

# Destructuring works with tables as well
(def person @{:name "Bob Dylan" :age 77})
(def
  {:name person-name
   :age person-age} person)
(print person-name) # Prints "Bob Dylan"
(print person-age)  # Prints 77
```)

Destructuring works in many places in Janet, including @code`let` expressions,
function parameters, and @code`var`. It is a useful shorthand for extracting
values from data structures and is the recommended way to get values out of
small structures.
