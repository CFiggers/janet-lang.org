{:title "The Janet Programming Language"
 :nav-title "Home"
 :template "index.html"
 :order 1}
 ---

## Community

Feel free to ask questions and join discussion on the @link[https://gitter.im/janet-language/community]{Janet Gitter Channel}.
Alternatively, check out @link[https://webchat.freenode.net/]{the #janet channel on Freenode}.
For help, you can also checkout @link[https://janetdocs.com]{Janet Docs} for the Janet documentation with user provided examples.

## Use Cases

Janet makes a good system scripting language, or a language to embed in other programs. Think Lua or Guile. Janet also can be used for rapid prototyping, dynamic systems, and other domains
where dynamic languages shine. Implemented mostly in standard C99, Janet runs on Windows, Linux and macOS.
The few features that are not standard C (dynamic library loading, compiler specific optimizations),
are fairly straightforward. Janet can be easily ported to new platforms.

## Features

@ul{@li{Minimal setup - one binary and you are good to go!}
    @li{First class closures}
    @li{Garbage collection}
    @li{First class green threads (continuations)}
    @li{Python style generators (implemented as a plain macro)}
    @li{Mutable and immutable arrays (array/tuple)}
    @li{Mutable and immutable hashtables (table/struct)}
    @li{Mutable and immutable strings (buffer/string)}
    @li{Macros}
    @li{Byte code interpreter with an assembly interface, as well as bytecode verification}
    @li{Tailcall Optimization}
    @li{Direct interop with C via abstract types and C functions}
    @li{Dynamically load C libraries}
    @li{Functional and imperative standard library}
    @li{Lexical scoping}
    @li{Imperative and functional programming}
    @li{REPL}
    @li{Parsing Expression Grammars built in to the core library}
    @li{300+ functions and macros in the core library}
    @li{Interactive environment with detailed stack traces}
    @li{Export your projects to standalone executables with a companion build tool, jpm}}

## Try It

@html[
<div id="replblock">
<div id="replterm">

</div>
<div id="replinbar">
  <span id="replprompt">&gt;</span><div contenteditable="true" id="replin">(print "hello, world!")</div>
</div>
</div>
]

## Usage

A REPL is launched when the binary is invoked with no arguments. Pass the -h flag
to display the usage information. Individual scripts can be run with @code`janet myscript.janet`

If you are looking to explore, you can print a list of all available macros, functions, and constants
by entering the command @code[all-bindings] into the REPL.

@codeblock(```
$ janet
Janet 1.0.0-dev-cc1ff91  Copyright (C) 2017-2019 Calvin Rose
janet:0:> (+ 1 2 3)
6
janet:10:> (print "Hello, world!")
Hello, world!
nil
janet:34:> (os/exit)
$ janet -h
usage: janet [options] script args...
Options are:
  -h : Show this help
  -v : Print the version string
  -s : Use raw stdin instead of getline like functionality
  -e code : Execute a string of janet
  -r : Enter the repl after running all scripts
  -p : Keep on executing if there is a top level error (persistent)
  -q : Hide prompt, logo, and repl output (quiet)
  -k : Compile scripts but do not execute
  -m syspath : Set system path for loading global modules
  -c source output : Compile janet source code into an image
  -n : Disable ANSI color output in the repl
  -l path : Execute code in a file before running the main script
  -- : Stop handling options
```)

## Modules and Libraries

See some auxiliary projects on @link[https://github.com/janet-lang]{GitHub}. Here is a short list of libraries
for Janet to help you get started with some interesting stuff. See @link[https://github.com/janet-lang/pkgs]{the Janet Package Listing}
for a more complete list. Packages in the listing can be installed via @code`jpm install pkg-name`.

@ul{@li{@link[https://github.com/janet-lang/circlet]{Circlet} - An HTTP server for Janet}
    @li{@link[https://joyframework.com/]{Joy Web Framework} - Framework for web development in Janet}
    @li{@link[https://github.com/janet-lang/json]{JSON} - A JSON parser and encoder}
    @li{@link[https://github.com/janet-lang/sqlite3]{SQLite3} - Bindings to SQLite}
    @li{@link[https://github.com/janet-lang/webview]{WebView} - Spawn a browser window for creating HTML+CSS UIs on any platform}
    @li{@link[https://github.com/janet-lang/jaylib]{Jaylib} - Bindings to Raylib for 2d and 3d game development}
    @li{@link[https://github.com/janet-lang/jhydro]{JHydro} - Cryptography for Janet}
    @li{@link[https://github.com/janet-lang/janetui]{JanetUI} - Bindings to @link[https://github.com/andlabs/libui]{libui}}}

For editor support:

@ul{@li{@link[https://github.com/Olical/conjure]{Conjure} - Interactive evaluation for Neovim (Clojure, Fennel, Janet)}
    @li{@link[https://github.com/janet-lang/janet.vim]{janet.vim} - Support for Janet syntax in Vim}
    @li{@link[https://github.com/janet-lang/vscode-janet]{vscode-janet} - VSCode plugin for Janet}
    @li{@link[https://github.com/SerialDev/ijanet-mode]{ijanet-mode} - Emacs interactive Janet mode}
    @li{@link[https://github.com/ALSchwalm/janet-mode]{janet-mode} - Janet major mode for Emacs}
    @li{@link[https://github.com/velkyel/inf-janet]{inf-janet} - Inferior lisp Janet mode for Emacs}
    @li{@link[https://atom.io/packages/language-janet]{language-janet} - Atom Editor support for Janet.}}
